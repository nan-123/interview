java成长笔记2
 5. JAVA 基础
 5.1.1. JAVA 异常分类及处理  内存异常  编译器报错  运行时报错
  5.1.1.2. 异常分类
  Throwable 是 Java 语言中所有错误或异常的超类。下一层分为 Error 和 Exception
  Error
   Error 类是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果
   出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。
  Exception（RuntimeException、CheckedException）
   2. Exception 又有两个分支，一个是运行时异常 RuntimeException ，一个是
      CheckedException
   RuntimeException 如 ： NullPointerException 、 ClassCastException ；一个是检查异常
   CheckedException，如 I/O 错误导致的 IOException、SQLException。 RuntimeException 是
   那些可能在 Java 虚拟机正常运行期间抛出的异常的超类。 如果出现 RuntimeException，那么一
   定是程序员的错误
  检查异常 CheckedException：一般是外部错误，这种异常都发生在编译阶段
 5.1.1.4. Throw 和 throws 的区别：
 5.1.2. JAVA 反射
  5.1.2.1. 动态语言
    Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；
     并且对于任意一个对象，都能够调用它的任意一个方法
 5.1.2.3. 反射的应用场合
 5.1.2.4. Java 反射 API
  1. 获取想要操作的类的 Class 对象，他是反射的核心，通过 Class 对象我们可以任意调用类的方法。
  2. 调用 Class 类中的方法，既就是反射的使用阶段。
  3. 使用反射 API 来操作这些信息。
 5.1.2.7. 创建对象的两种方法 
  Class 对象的 newInstance()
  调用 Constructor 对象的 newInstance()
  Class clazz=Class.forName("reflection.Person"); 
  //使用.newInstane 方法创建对象
  Person p=(Person) clazz.newInstance();
  //获取构造方法并创建对象
  Constructor c=clazz.getDeclaredConstructor(String.class,String.class,int.class);
 5.1.3. JAVA 注解
  Annatation(注解)是一个接口
  5.1.3.2. 4 种标准元注解
   @Target 修饰的对象范围 @Retention 定义 被保留的时间长短 @Documented ᧿述-javadoc @Inherited 阐述了某个被标注的类型是被继承的
 5.1.4. JAVA 内部类
  据定义的方式不同，内部类分为静态内部类，成员内部类，局部内部类，匿名内部类四种。
 5.1.5. JAVA 泛型
  泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数
 5.1.5.1. 泛型方法（<E>）
  T 意味某种类型  
  E 意味 链表、数组里的元素，如List<E> list 表示 list 里的元素。
  K意味map(k,v) 里的键值 Key
  V 意味 返回或映射的值。
 5.1.5.4. 类型擦除
  Java 中的泛型基本上都是在编译器这个层次来实现的。在生成的 Java 字节代码中是不包含泛型中的类型信息的
 5.1.6. JAVA 序列化(创建可复用的 Java 对象)
-----------------------------------------------------------------------------------------------------
 6. Spring 原理
  6.1.1. Spring 特点
  6.1.1.1. 轻量级  1M多，非入侵-不易了spring的特定类
  6.1.1.2. 控制反转 促进了低耦合 对象依赖被动传递
  6.1.1.3. 面向切面 -业务逻辑和系统服务分开
  6.1.1.4. 容器 spring自动管理对象配置和生命周期
  6.1.1.5. 框架集合 -容易整合其他框架
 6.1.2. Spring 核心组件
  web；data access-jdbc orm等；aop；core contaner - bean，core，context
 2：模块组成
 spring xxx 
        core ：核心库类，ioc
		context 框架式的bean访问
		aop：aop服务
		dao：jdbc处理
		web：面向web综合特性
		mvc：
		orm：对现有orm框架支持
  6.1.5. Spring 常用注解
   controller;restController;component;repository;service
   responsebody;requestMapping;autowired;pathVariable
   modelattrbute;valid;cookieValue
  6.1.7. Spring IOC 原理
   实现：
    1.1..1.1.1 BeanDefinitionRegistry 注册表
	 1. Spring 配置文件中每一个节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，
        它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册
         BeanDefinition 对象的方法。
	 1.1..1.1.2 BeanFactory 顶层接口
	  2. 位于类结构树的顶端 ，它最主要的方法就是 getBean(String beanName)，该方法从容器中
         返回特定名称的 Bean，BeanFactory 的功能通过其他的接口得到不断扩展：
	 1.1..1.1.3 ListableBeanFactory
	   3. 该接口定义了访问容器中 Bean 基本信息的若干方法，如查看 Bean 的个数、获取某一类型
          Bean 的配置名、查看容器中是否包括某一 Bean 等方法；
	1.1..1.1.4 HierarchicalBeanFactory 父子级联
       4. 父子级联 IoC 容器的接口，子容器可以通过接口方法访问父容器； 通过
       HierarchicalBeanFactory 接口， Spring 的 IoC 容器可以建立父子层级关联的容器体系，子
       容器可以访问父容器中的 Bean，但父容器不能访问子容器的 Bean。Spring 使用父子容器实
       现了很多功能，比如在 Spring MVC 中，展现层 Bean 位于一个子容器中，而业务层和持久
       层的 Bean 位于父容器中。这样，展现层 Bean 就可以引用业务层和持久层的 Bean，而业务
       层和持久层的 Bean 则看不到展现层的 Bean
	1.1..1.1.5 ConfigurableBeanFactory
	 5. 是一个重要的接口，增强了 IoC 容器的可定制性，它定义了设置类装载器、属性编辑器、容
        器初始化后置处理器等方法；
    1.1..1.1.6 AutowireCapableBeanFactory 自动装配
	 6. 定义了将容器中的 Bean 按某种规则（如按名字匹配、按类型匹配等）进行自动装配的方法；
	1.1..1.1.7 SingletonBeanRegistry 运行期间注册单例 Bean
      7. 定义了允许在运行期间向容器注册单实例 Bean 的方法；对于单实例（ singleton）的 Bean 
      来说，BeanFactory 会缓存 Bean 实例，所以第二次使用 getBean() 获取 Bean 时将直接从
      IoC 容器的缓存中获取 Bean 实例
ApplicationContext 面向开发应用
   ApplicationContext 由 BeanFactory 派生而来，提供了更多面向实际应用的功能。
   ApplicationContext 继承了 HierarchicalBeanFactory 和 ListableBeanFactory 接口，在此基础
  上，还通过多个其他的接口扩展了 BeanFactory 的功能：
  1. ClassPathXmlApplicationContext：默认从类路径加载配置文件
  2. FileSystemXmlApplicationContext：默认从文件系统中装载配置文件
  3. ApplicationEventPublisher：让容器拥有发布应用上下文事件的功能，包括容器启动事
    件、关闭事件等
  4. MessageSource：为应用提供 i18n 国际化消息访问的功能
  5. ResourcePatternResolver ： 所 有 ApplicationContext 实现类都实现了类似于
     PathMatchingResourcePatternResolver 的功能，可以通过带前缀的 Ant 风格的资源文
     件路径装载 Spring 的配置文件
  6. LifeCycle：该接口是 Spring 2.0 加入的，该接口提供了 start()和 stop()两个方法，主要
     用于控制异步处理过程
  7. ConfigurableApplicationContext 扩展于 ApplicationContext，它新增加了两个主要
     的方法： refresh()和 close()，让 ApplicationContext 具有启动、刷新和关闭应用上下
     文的能力。
 6.1.7.4. Spring Bean 作用域
  定义了 5 中作用域，分别为 singleton（单例）、prototype（原型）、
    request、session 和 global session
 6.1.7.5. Spring Bean 生命周期
  1 实例化
    实例化一个 Bean，也就是我们常说的 new。
  2 IOC 依赖注入
    按照 Spring 上下文对实例化的 Bean 进行配置，也就是 IOC 注入
  3 setBeanName 实现
    如果这个 Bean 已经实现了 BeanNameAware 接口，会调用它实现的 setBeanName(String)
   方法，此处传递的就是 Spring 配置文件中 Bean 的 id 值
  4 BeanFactoryAware 实现
    如果这个 Bean 已经实现了 BeanFactoryAware 接口，会调用它实现的 setBeanFactory，
      setBeanFactory(BeanFactory)传递的是 Spring 工厂自身
  5 ApplicationContextAware 实现
    如果这个 Bean 已经实现了 ApplicationContextAware 接口，会调用
    setApplicationContext(ApplicationContext)方法，传入 Spring 上下文
  6 postProcessBeforeInitialization 接口实现-初始化预处理
   如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用
   postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor 经常被用
   作是 Bean 内容的更改，并且由于这个是在 Bean 初始化结束时调用那个的方法，也可以被应
   用于内存或缓存技术
  7 init-method
    如果 Bean 在 Spring 配置文件中配置了 init-method 属性会自动调用其配置的初始化方法。
  8 postProcessAfterInitialization
   如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用
   postProcessAfterInitialization(Object obj, String s)方法。
   注：以上工作完成以后就可以应用这个 Bean 了
  9 Destroy 过期自动清理阶段
   当 Bean 不再需要时，会经过清理阶段，如果 Bean 实现了 DisposableBean 这个接口，会调
   用那个其实现的 destroy()方法
  10 destroy-method 自配置清理
   最后，如果这个 Bean 的 Spring 配置中配置了 destroy-method 属性，会自动调用其配置的
   销毁方法
 6.1.7.6. Spring 依赖注入四种方式
  构造器注入
       /*带参数，方便利用构造器进行注入*/ 
      public CatDaoImpl(String message){ 
      this. message = message; 
       } 
     <bean id="CatDaoImpl" class="com.CatDaoImpl"> 
     <constructor-arg value=" message "></constructor-arg> 
     </bean>  
 
 setter 方法注入
       public class Id { 
     private int id; 
     public int getId() { return id; } 
     public void setId(int id) { this.id = id; } 
      
     bean id="id" class="com.id "> <property name="id" value="123"></property> </bean>
  静态工厂注入
  实例工厂
 6.1.7.7. 5 种不同方式的自动装配
     Spring 装配包括手动装配和自动装配，手动装配是有基于 xml 装配、构造方法、setter 方法等
     自动装配有五种自动装配的方式，可以用来指导 Spring 容器用自动装配方式来进行依赖注入。
   1. no：默认的方式是不进行自动装配，通过显式设置 ref 属性来进行装配。
   2. byName：通过参数名 自动装配，Spring 容器在配置文件中发现 bean 的 autowire 属性被设
    置成 byname，之后容器试图匹配、装配和该 bean 的属性具有相同名字的 bean。
   3. byType：通过参数类型自动装配，Spring 容器在配置文件中发现 bean 的 autowire 属性被
    设置成 byType，之后容器试图匹配、装配和该 bean 的属性具有相同类型的 bean。如果有多
    个 bean 符合条件，则抛出错误。
   4. constructor：这个方式类似于 byType， 但是要提供给构造器参数，如果没有确定的带参数
    的构造器参数类型，将会抛出异常。
   5. autodetect：首先尝试使用 constructor 来自动装配，如果无法工作，则使用 byType 方式
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6.1.8. Spring APO 原理
  AOP 把软件系统分为两个部分：核心关注点和横切关注点
  比如权限认证、日志、事物
  1、切面（aspect）：类是对物体特征的抽象，切面就是对横切关注点的抽象
  2、横切关注点：对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点。
  3、连接点（joinpoint）：被拦截到的点，因为 Spring 只支持方法类型的连接点，所以在 Spring
   中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器。
  4、切入点（pointcut）：对连接点进行拦截的定义
  5、通知（advice）：所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、
   异常、最终、环绕通知五类。 6、目标对象：代理的目标对象
  7、织入（weave）：将切面应用到目标对象并导致代理对象创建的过程
  8、引入（introduction）：在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法
    或字段
6.1.8.1. AOP 两种代理方式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6.1.9. Spring MVC 原理
  Spring 的模型-视图-控制器（MVC）框架是围绕一个 DispatcherServlet 来设计的，这个 Servlet
   会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染
   等，甚至还能支持文件上传
   Http 请求到 DispatcherServlet
     (1) 客户端请求提交到 DispatcherServlet。
  HandlerMapping 寻找处理器
     (2) 由 DispatcherServlet 控制器查询一个或多个 HandlerMapping，找到处理请求的
      Controller。
  调用处理器 Controller
     (3) DispatcherServlet 将请求提交到 Controller。
  Controller 调用业务逻辑处理后，返回 ModelAndView
     (4)(5)调用业务处理和返回结果：Controller 调用业务逻辑处理后，返回 ModelAndView。
  DispatcherServlet 查询 ModelAndView
     (6)(7)处理视图映射并返回模型： DispatcherServlet 查询一个或多个 ViewResoler 视图解析器，
       找到 ModelAndView 指定的视图。
  ModelAndView 反馈浏览器 HTTP
     (8) Http 响应：视图负责将结果显示到客户端。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6.1.10. Spring Boot 原理
  目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的
   配置
  特点：
   1. 创建独立的 Spring 应用程序
   2. 嵌入的 Tomcat，无需部署 WAR 文件
   3. 简化 Maven 配置
   4. 自动配置 Spring
   5. ᨀ供生产就绪型功能，如指标，健康检查和外部配置
   6. 绝对没有代码生成和对 XML 没有要求配置 [1]
 6.1.11. JPA 原理
   6.1.11.1. 事务 原子性 ( Atomicity )、一致性( Consistency )、隔离性 ( Isolation ) 和持久性 ( Durabilily )。
   6.1.11.2. 本地事务  数据库连接 
   6.1.11.1. 分布式事务
   分布式事务（Distributed Transaction）包括事务管理器（Transaction Manager）和一个或多个支持 XA 协议的资源管理器
   6.1.11.1. 两阶段ᨀ交 第一阶段：准备阶段；第二阶段：提交阶段。
    1 准备阶段
	  事务协调者(事务管理器)给每个参与者(资源管理器)发送 Prepare 消息，每个参与者要么直接返回
       失败(如权限验证失败)，要么在本地执行事务，写本地的 redo 和 undo 日志，但不提交，到达一
       种“万事俱备，只欠东风”的状态
	2 提交阶段：
	 如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，
      发送提交(Commit)消息-:必须在最后阶段释放锁资源
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 6.1.12. Mybatis 缓存
  Mybatis 中有一级缓存，默认开启，不能关闭，sqlsession级别，第二次相同的sql查询生效，最多存1024条
  二级缓存：mapper级别，不同的sqlssion可以用，不建议用
 Mybatis 的一级缓存原理
  key：MapperID+offset+limit+Sql+所有的入参  value：用户信息
  。如果两次中间出现 commit 操作（修改、添加、删除），本 sqlsession 中的一级缓存区域全部清空，下次再去缓存中查询不到所以要从数据库查询
 6.1.12.2. 二级缓存原理（mapper 基本）
 key：MapperID+offset+limit+Sql+所有的入参
  具体使用需要配置：
   1. Mybatis 全局配置中启用二级缓存配置
   2. 在对应的 Mapper.xml 中配置 cache 节点
   3. 在对应的 select 查询节点中添加 useCache=true
  configuration --- sqlsession --- executor mybatis三巨头
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 7. 微服务
  7.1.1. 服务注册发现  
   服务注册就是维护一个登记簿，它管理系统内所有的服务地址
   当新的服务启动后，它会向登记簿交待自己的地址信息。服务的依赖方直接向登记簿要 Service Provider 地址就行了
   当下用于服务注册的工具非常多 ZooKeeper，Consul，Etcd, 还有 Netflix 家的 eureka 等
   。服务注册有两种形式：客户端注册和第三方注册。
  7.1.1.1. 客户端注册（zookeeper）
  7.1.1.2. 第三方注册（独立的服务 Registrar）
   这种方式的缺点是 Registrar 必须是一个高可用的系统
  7.1.1.3. 客户端发现
    客户端发现是指客户端负责查询可用服务地址，以及负载均衡的工作
	缺点也在于多语言时的重复工作，每个语言实现相同的逻辑。
  7.1.1.4. 服务端发现
   服务端发现需要额外的 Router 服务，请求先打到 Router，然后 Router 负责查询服务与负载均衡
    缺点是保证 Router 的高可用。
eureka：注册中心，服务的注册与发现
Ribbon：负载均衡组件
hystrix：容断组件
feign：远程调用组件，集成ribbon和hystrix
zuul：网关组件，有路由和过滤器功能

网关的作用：
 它还可能有其他功能，如授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理等
 API Gateway 负责请求转发、合成和协议转换
 7.1.2.1. 请求转发
 7.1.2.2. 响应合并
 7.1.2.3. 协议转换
  重点是支持 SOAP，JMS，Rest 间的协议转换。
 7.1.2.4. 数据转换
  重点是支持 XML 和 Json 之间的报文格式转换能力（可选）
 7.1.2.5. 安全认证
  基于 Token 的客户端访问控制和安全策略
  OAuth2.0 的服务安全认证
 7.1.3.1. zookeeper 配置中心
 7.1.4. 事件调度（kafka，mq）
 7.1.5. 服务跟踪（starter-sleuth）
  跟踪一个请求从一个微服务到下一个微服务的传播过程，
  Spring Cloud Sleuth 正是解决这个问题，它在日志中引入唯一 ID，以保证微服务调用之间的一致性，这
  样你就能跟踪某个请求是如何从一个微服务传递到下一个
--------------------------------------------------------------------------------------------------
11. Zookeeper
 Zookeeper 是一个分布式协调服务，可用于服务发现，分布式锁，分布式领导选举，配置管理等
 Zookeeper 提供了一个类似于 Linux 文件系统的树形结构
11.1.1. Zookeeper 角色
  11.1.1.1. Leader
   只有一个，维护follwer和observer心跳
   所有的写操作必须要通过 Leader 完成再由 Leader 将写操作广播给其它服务器 半数成功，提交-类2pc
  11.1.1.2. Follower
   多个，响应leader心跳
   处理读请求，转发写请求给leader，投票写请求
  11.1.1.3. Observer
   跟follower类似，无投票权，接受客户端连接
  11.1.1.1. ZAB 协议
   事务编号 Zxid（事务请求计数器+ epoch）
   epoch：代id
   Zab 协议有两种模式-恢复模式（选主）、广播模式（同步）
   Leader election（选举阶段-选出准 Leader）
    只要有一个节点得到超半数节点的票数，它就可以当选准 leader
 11.1.1.2. 投票机制
   每个 sever 首先给自己投票，然后用自己的选票和其他 sever 选票对比，权重大的胜出，使用权重较大的更新自身选票箱
 11.1.2. Zookeeper 工作原理（原子广播）
 11.1.3. Znode 有四种形式的目录节点
  1. PERSISTENT：持久的节点。
  2. EPHEMERAL：暂时的节点。
  3. PERSISTENT_SEQUENTIAL：持久化顺序编号目录节点。
  4. EPHEMERAL_SEQUENTIAL：暂时化顺序编号目录节点。
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  12. Kafka
   Kafka 是一种高吞吐量、分布式、基于发布/订阅的消息系统 Scala 语言编写
   1. broker：Kafka 服务器，负责消息存储和转发
   2. topic：消息类别，Kafka 按照 topic 来分类消息
   3. partition：topic 的分区，一个 topic 可以包含多个 partition，topic 消息保存在各个partition 上
   4. offset：消息在日志中的位置，可以理解是消息在 partition 上的偏移量，也是代表该消息的唯一序号
   5. Producer：消息生产者
   6. Consumer：消息消费者
   7. Consumer Group：消费者分组，每个 Consumer 必须属于一个 group
   8. Zookeeper：保存着集群 broker、topic、partition 等 meta 数据；另外，还负责 broker 故障发现，partition leader 选举，负载均衡等功能
 12.1.2. Kafka 数据存储设计
   12.1.2.1. partition 的数据文件（offset，MessageSize，data）
   partition 中的每条 Message 包含了以下三个属性：offset，MessageSize，data，
   其中 offset 表 示 Message 在这个 partition 中的偏移量，
   offset 不是该 Message 在 partition 数据文件中的实际存储位置，而是逻辑上一个值
   offset 是partition 中 Message 的 id；MessageSize 表示消息内容 data 的大小；
   data 为 Message 的具体内容。
 12.1.2.2. 数据文件分段 segment（顺序读写、分段命令、二分查找）
  partition 物理上由多个 segment 文件组成，每个 segment 大小相等，顺序读写
  每个 segment数据文件以该段中最小的 offset 命名，文件扩展名为.log
  用二分查找就可以定位到该 Message 在哪个 segment 数据文件中。
 12.1.2.3. 数据文件索引（分段索引、稀疏存储）
  Kafka 为每个分段后的数据文件建立了索引文件，文件名与数据文件的名字是一样的只是文件扩展名为.index
  index 文件中并没有为数据文件中的每条 Message 建立索引，而是采用了稀疏存储的方式，每隔一定字节的数据建立一条索引
  这样避免了索引文件占用过多的空间，从而可以将索引文件保留在内存中。
 12.1.3. 生产者设计
  12.1.3.1. 负载均衡（partition 会均衡分布到不同 broker 上）
   由于消息 topic 由多个 partition 组成，且 partition 会均衡分布到不同 broker 上
   因此，为了有效利用 broker 集群的性能，提高消息的吞吐量，
   producer 可以通过随机或者 hash 等方式，将消息平均发送到多个 partition 上，以实现负载均衡
 12.1.3.2. 批量发送
  以一次请求的方式发送了批量的消息给 broker，从而大大减少 broker 存储消息的 IO 操作次数
  但也一定程度上影响了消息的实时性
 12.1.3.3. 压缩（GZIP 或 Snappy）
  Producer 端可以通过 GZIP 或 Snappy 格式对消息集合进行压缩
 12.1.1.1. Consumer Group
  同一 Consumer Group 中的多个 Consumer 实例，不同时消费同一个 partition，
  等效于队列模式。partition 内消息是有序的，Consumer 通过 pull 方式消费消息
  Kafka 不删除已消费的消息对于 partition，顺序读写磁盘数据
 消息的写入性能
   按照顺序写入，不用寻址，性能高
   0拷贝
    正常流程 磁盘--缓存--app缓存--socket流--nic流，需要经历4次复制
    kafka采用直接从页缓存直接到socket
1-数据传输的事务定义通常有以下三种级别：

（1）最多一次: 消息不会被重复发送，最多被传输一次，但也有可能一次不传输

（2）最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输.

（3）精确的一次（Exactly once）: 不会漏传输也不会重复传输,每个消息都传输被一次而

   且仅仅被传输一次，这是大家所期望的
 模式pull&&push
push 模式下，当 broker 推送的速率远大于 consumer 消费的速率时，
consumer 恐怕就要崩溃了。最终 Kafka 还是选取了传统的 pull 模式
Pull 模式的另外一个好处是 consumer 可以自主决定是否批量的从 broker 拉取数据
Pull 有个缺点是，如果 broker 没有可供消费的消息，将导致 consumer 不断在循环中轮询
 13.kafka 的 ack 机制
  request.required.acks 有三个值 0 1 -1
   0：不需要确认
   1：leader确认
   -1：所有节点确认
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  13. RabbitMQ
   RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。
   AMQP ：Advanced Message Queue，高级消息队列协议
   1. 可靠性（Reliability）：RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布
      确认
  2. 灵活的路由（Flexible Routing）：在消息进入队列之前，通过 Exchange 来路由消息的。对
     于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路
     由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange
  3. 消息集群（Clustering）：多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。
  4. 高可用（Highly Available Queues）：队列可以在集群中的机器上进行镜像，使得在部分节
     点出问题的情况下队列仍然可用
  5. 多种协议（Multi-protocol）：RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 
     等等。
  6. 多语言客户端（Many Clients）：RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、
     Ruby 等等。
  7. 管理界面（Management UI）
  8. 跟踪机制（Tracing）
  9. 插件机制（Plugin System）
 13.1.2.1. Message
  消息，消息是不具名的，它由消息头和消息体组成。
   消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括 routing-key（路由键）、priority（
 13.1.2.2. Publisher
   1. 消息的生产者，也是一个向交换器发布消息的客户端应用程序。
 13.1.2.3. Exchange（将消息路由给队列 ）
   2. 交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。
 13.1.2.4. Binding（消息队列和交换器之间的关联）
 13.1.2.5. Queue 它是消息的容器，也是消息的终点
 13.1.2.6. Connection  网络连接，比如一个 TCP 连接。
 13.1.2.7. Channel
  信道，多路复用连接中的一条独立的双向数据流通道
 13.1.2.8. Consumer
 13.1.2.9. Virtual Host 虚拟主机，表示一批交换器、消息队列和相关对象
 13.1.2.10.Broker
  表示消息队列服务器实体。
 13.1.3. Exchange 类型
  目前共四种类型：direct、fanout、topic、headers
  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 afka和rabbitmq
 实时性
 Kafka短轮询，实时性取决轮询间隔时间
 RocketMQ长轮询，消息投递延时通常在几毫秒
 失败重试
  Kafka消费失败不支持重试
 RocketMQ消费失败支持定时重试，每次重试间隔时间顺延
 消息顺序
 Kafka消息顺序，broker宕机，产生消息乱序
 RocketMQ消息顺序，broker宕机，不会乱序
 定时消息
 Kafka不支持
 RocketMQ支持，指定毫秒级别的延时时间
 分布式式事物
 Kafka不支持
 RocketMQ支持
 消息查询
 Kafka不支持
 RocketMQ支持根据message id和消息内容查询
 消息回溯
 Kafka理论支持
 RocketMQ按照时间支持，精确到毫秒
 消费并行度
 Kafka消费并行度与分区数一致
 RocketMQ顺序消费和Kafka一样，乱序取决consumer的线程数
 消息轨迹
 Kafka不支持
 RocketMQ支持
 broker消息过滤
 Kafka不支持
 RocketMQ根据message tag或者任意形式过滤
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
  
  
  
  
  
  
  
  
  