spring 框架 
知乎总结1：
1：spring是什么
 spring是一个轻量级的ioc和aop容器框架，是为java应用程序提供基础性服务的一套框架
 目的是简化企业应用程序的开发，开发者只需要关心业务需求，常见配置三种：
 基于xml配置，注解，java
2：模块组成
 spring xxx 
        core ：核心库类，ioc
		context 框架式的bean访问
		aop：aop服务
		dao：jdbc处理
		web：面向web综合特性
		mvc：
		orm：对现有orm框架支持
2：优点：
 低侵入
 低耦合
 提供aop技术。支持安全，事务，日志，权限等进行集中式管理
 对主流应用框架的支持
aop：
  oop面向对象，不适合用于定义横向关系，导致大量代码重复不利于各个模块的复用
  aop：称为面向切面编程，用于哪些与业务无关，但却对多个对象产生影响的公共行为逻辑
  抽取封装成为一个可重用模块，这个模块被称为切面-Aspect
  减少系统中重复的代码，减低模块耦合，同时提高了可维护性，认证，日志，事务
 实现：
  代理，动态代理
   jdk，cglib
   jdk：spring检查目标代理类有接口，使用jdk，没有则使用cglib
   核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，
   动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例,  
   生成目标类的代理对象。

ioc：
 控制反转，是创建对象的控制权的转移，以前创建对象的时机是由自己把控，现在把这种权力转移到spring容器中
 并由容器根据配置去创建实例和管理各个实例之间的依赖关系，对象与对象之间松耦合，利于复用
 di：也是控制反转的不同表达，运行时依赖ioc容器动态注入
 
 最直接的表达：不用new spring自动产生，反射，根据配置运行时动态创建和管理对象，并且调用对象方法
 
 三种注入：构造器，setter，注解
  ioc：让组件解耦，aop：公共功能抽离成复用组件
 BeanFactory和ApplicationContext：
  spring的两大核心接口，applicationContext是beanFactory的子接口
 BeanFactory：
  是spring里面最底层的接口，包含了各种bean的定义，读取bean配置文档，管理bean加载，实例化，控制bean的生命周期，维护bean自己的依赖
  ApplicationContext接口是beanFactory的派生，除了beanFatory所有功能外，还能：
   继承MessageSource，因此支持国际化
   统一的资源文件访问方式-读取配置
   提供bean事件
   加载多个配置文件
   载入多个有上下文，比如web层
  BeanFactroy采用的是延迟加载形式来注入Bean的
  ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入
  相对于基本的BeanFactory ApplicationContext 唯一的不足是占用内存空间。
   当应用程序配置Bean较多时，程序启动较慢。
 BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。
 
 spring的生命周期：
  servlet的生命周期：实例化-初始化init 接受请求 销毁destroy
  bean：
   实例化：
    beanFatory 调用createbean方法实例化 或者applicationcontext获取BeanDefinition，实例化bean
   依赖注入
    Spring根据BeanDefinition中的信息 以及 通过BeanWrapper提供的设置属性的接口完成依赖注入
   处理Aware接口：
    ，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean
   bean的几种作用域：
    singleton

   Spring事务的实现方式和实现原理：
   spring支持编程式事务管理和声明式事务管理两种方式：

   Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的


   4、解释一下Spring AOP里面的几个名词：
   （1）切面（Aspect）：被抽取的公共模块，可能会横切多个对象。 在Spring AOP中，切面可以使用通用类（基于模式的风格） 或者在普通类中以 @AspectJ 注解来实现。
   （2）连接点（Join point）：指方法，在Spring AOP中，一个连接点 总是 代表一个方法的执行。
   （3）通知（Advice）：在切面的某个特定的连接点（Join point）上执行的动作。通知有各种类型，其中包括“around”、“before”和“after”等通知。许多AOP框架，包括Spring，都是以拦截器做通知模型， 并维护一个以连接点为中心的拦截器链。
   （4）切入点（Pointcut）：切入点是指 我们要对哪些Join point进行拦截的定义。通过切入点表达式，指定拦截的方法，比如指定拦截add*、search*。（5）引入（Introduction）：（也被称为内部类型声明（inter-type declaration））。声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用一个引入来使bean实现 IsModified 接口，以便简化缓存机制。
   （6）目标对象（Target Object）： 被一个或者多个切面（aspect）所通知（advise）的对象。也有人把它叫做 被通知（adviced） 对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个 被代理（proxied） 对象。（7）织入（Weaving）：指把增强应用到目标对象来创建新的代理对象的过程。Spring是在运行时完成织入。