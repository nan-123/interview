java成长笔记4
14. Hbase
 base 是分布式、面向列的开源数据库（其实准确的说是面向列族）
 HDFS 为 Hbase 提供可靠的底层数据存储服务
 MapReduce 为 Hbase 提供高性能的计算能力
 Zookeeper 为 Hbase 提供稳定服务和 Failover 机制
14.1.2. 列式存储
 列方式所带来的重要好处之一就是，由于查询中的选择规则是通过列来定义的，因此整个数据库
 是自动索引化的
14.1.3. Hbase 核心概念
 14.1.3.1. Column Family 列族
  Column Family 又叫列族，Hbase 通过列族划分数据的存储，列族下面可以包含任意多的列，实
  现灵活的数据存取。Hbase 表的创建的时候就必须指定列族。就像关系型数据库创建的时候必须
  指定具体的列是一样的。Hbase 的列族不是越多越好，官方推荐的是列族最好小于或者等于 3。我
  们使用的场景一般是 1 个列族
 14.1.3.2. Rowkey（Rowkey 查询，Rowkey 范围扫描，全表扫描）
   Rowkey 的概念和 mysql 中的主键是完全一样的
 14.1.3.3. Region 分区
   Region 的概念和关系型数据库的分区或者分片差不多
   Hbase 会将一个大表的数据基于 Rowkey 的不同范围分配到不通的 Region 中
 14.1.3.4. TimeStamp 多版本
  在Hbase 中，相同 rowkey 的数据按照 timestamp 倒序排列。默认查询的是最新的版本，用户
  可同指定 timestamp 的值来读取旧版本的数据
14.1.4. Hbase 核心架构
  Hbase 是由 Client、Zookeeper、Master、HRegionServer、HDFS 等几个组建组成。
   14.1.4.1. Client：
    Client 包含了访问 Hbase 的接口，另外 Client 还维护了对应的 cache 来加速 Hbase 的
    访问，比如 cache 的.META.元数据的信息。
   14.1.4.2. Zookeeper：
    Hbase 通过 Zookeeper 来做 master 的高可用、RegionServer 的监控、元数据的入口
    以及集群配置的维护等工作
   14.1.4.3. Hmaster
    1. 为 RegionServer 分配 Region
    2. 维护整个集群的负载均衡
    3. 维护集群的元数据信息发现失效的 Region，并将失效的 Region 分配到正常
       RegionServer 上当 RegionSever 失效的时候，协调对应 Hlog 的拆分
   14.1.4.4. HregionServer
     HregionServer 直接对接用户的读写请求，是真正的“干活”的节点
	  1. 管理 master 为其分配的 Region
	  2. 处理来自客户端的读写请求
      3. 负责和底层 HDFS 的交互，存储数据到 HDFS
      4. 负责 Region 变大以后的拆分
      5. 负责 Storefile 的合并工作
   14.1.4.5. Region 寻址方式（通过 zookeeper .META）
   14.1.4.6. HDFS
    HDFS 为 Hbase 提供最终的底层数据存储服务，同时为 Hbase 提供高可用（Hlog 存储在
    HDFS）的支持。
   14.1.5.2. MemStore 刷盘
    为了提高 Hbase 的写入性能，当写请求写入 MemStore 后，不会立即刷盘。而是会等到一定的时候进行刷盘的操作
  1：hbase.regionserver.global.memstore.upperLimit，默认为整个 heap 内存的 40%。
  2. 当 MemStore 的大小达到 hbase.hregion.memstore.flush.size 大小的时候会触发刷
     盘，默认 128M 大小
  3：当达到 Hlog 的最大个数
     的时候，会强制刷盘。这个参数是 hase.regionserver.max.logs，默认是 32 个。
  4. 可以通过 hbase shell 或者 java api 手工触发 flush 的操作。
  5. 在正常关闭 RegionServer 会触发刷盘的操作
  6：Region 使用 HLOG 恢复完数据后触发
总结：大文件，强一致性，m-s架构，读写性能低，乐观并发控制

15. MongoDB
 MongoDB 是由 C++语言编写的，是一个基于分布式文件存储的开源数据库系统
  在高负载的情况下，添加更多的节点，可以保证服务器性能
  15.1.2. 特点
    x MongoDB 是一个面向文档存储的数据库，操作起来比较简单和容易。
    x 你可以在 MongoDB 记录中设置任何属性的索引 (如：FirstName="Sameer",Address="8 Ga
    ndhi Road")来实现更快的排序。
    x 你可以通过本地或者网络创建数据镜像，这使得 MongoDB 有更强的扩展性。
    x 如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其
    他节点上这就是所谓的分片。 x Mongo 支持丰富的查询表达式。查询指令使用 JSON 形式的标记，可轻易查询文档中内嵌的
    对象及数组。
    x MongoDb 使用 update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。 x Mongodb 中的 Map/reduce 主要是用来对数据进行批量处理和聚合操作。
    x Map 和 Reduce。Map 函数调用 emit(key,value)遍历集合中所有的记录，将 key 与 value 传 给 Reduce 函数进行处理。
    x Map 函数和 Reduce 函数是使用 Javascript 编写的，并可以通过 db.runCommand 或 mapre
    duce 命令来执行 MapReduce 操作
    xGridFS 是 MongoDB 中的一个内置功能，可以用于存放大量小文件。 x MongoDB 允许在服务端执行脚本，可以用 Javascript 编写某个函数，直接在服务端执行，也
    x可以把函数的定义存储在服务端，下次直接调用即可。
16. Cassandra
 Apache Cassandra 是高度可扩展的，高性能的分布式 NoSQL 数据库
 16.1.2. 数据模型
  Key Space（对应 SQL 数据库中的 database）
  Key（对应 SQL 数据库中的主键）
  column（对应 SQL 数据库中的列）
  super column（SQL 数据库不支持）cassandra 允许 key/value 中的 value 是一个 map(key/value_list)，即某个 column 有多个子列。
  Standard Column Family（相对应 SQL 数据库中的 table）
  Super Column Family（SQL 数据库不支持）
 16.1.3. Cassandra 一致 Hash 和虚拟节点
  一致性 Hash（多米诺 down 机）
  为每个节点分配一个 token，根据这个 token 值来决定节点在集群中的位置以及这个节点所存储的数据范围。
 16.1.4. Gossip 协议 “闲话算法”
------------------------------------------------------------------------------------------------------
17. 设计模式
 17.1.2. 工厂方法模式
17.1.3. 抽象工厂模式
17.1.4. 单例模式
17.1.5. 建造者模式
17.1.6. 原型模式
17.1.7. 适配器模式
17.1.8. 装饰器模式
17.1.9. 代理模式
17.1.10. 外观模式
17.1.11. 桥接模式
17.1.12. 组合模式
17.1.13. 享元模式
17.1.14. 策略模式
17.1.15. 模板方法模式
17.1.16. 观察者模式
17.1.17. 迭代子模式
17.1.18. 责任链模式
17.1.19. 命令模式
17.1.20. 备忘录模式
17.1.21. 状态模式
17.1.22. 访问者模式
17.1.23. 中介者模式
17.1.24. 解释器模式
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
18. 负载均衡
 负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带
  宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性
 18.1.1.1. 四层负载均衡（目标地址和端口交换）
    主要通过报文中的目标地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择
     的内部服务器
	以常见的 TCP 为例，【负载均衡设备在接收到第一个来自客户端的 SYN 请求时】，即通过上述方式选
     择一个【最佳的服务器】，并对【报文中目标 IP 地址进行修改(改为后端服务器 IP）】，直接转发给该服务
     器 负载均衡设备只是起到一个类似路由器的转发动作
   实现四层负载均衡的软件有：
    F5：硬件负载均衡器，功能很好，但是成本很高。
    lvs：重量级的四层负载软件。
    nginx：轻量级的四层负载软件，带缓存功能，正则表达式较灵活。
    haproxy：模拟四层转发，较灵活。
 18.1.1.2. 七层负载均衡（内容交换）
  概念：
   所谓七层负载均衡，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，
   再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器
  七层应用负载的好处，是使得整个网络更智能化
   例如访问一个网站的用户流量，可以通过七层
   的方式，将对图片类的请求转发到特定的图片服务器并可以使用缓存技术；将对文字类的请求可
   以转发到特定的文字服务器并可以使用压缩技术
 实现七层负载均衡的软件有
  haproxy：天生负载均衡技能，全面支持七层代理，会话保持，标记，路径转移；
  nginx：只在 http 协议和 mail 协议上功能比较好，性能与 haproxy 差不多；
  apache：功能较差
  Mysql proxy：功能尚可。
 18.1.2. 负载均衡算法/策略
  18.1.2.1. 轮循均衡（Round Robin）- 服务器配置相同
  18.1.2.1. 轮循均衡（Round Robin）- 服务器配置不一样，好的权重高
  18.1.2.3. 随机均衡（Random）
  18.1.2.4. 权重随机均衡（Weighted Random）
  18.1.2.5. 响应速度均衡（Response Time 探测时间）
   负载均衡设备对内部各服务器发出一个探测请求（例如 Ping）
   然后根据内部中各服务器对探测请求的最快响应时间来决定哪一台服务器来响应客户端的服务请求
   仅仅指的是负载均衡设备与服务器间的
  18.1.2.6. 最少连接数均衡（Least Connection）
  18.1.2.7. 处理能力均衡（CPU、内存），尤其适合运用到第七层（应用层）
  18.1.2.8. DNS 响应均衡（Flash DNS）地域最快
  18.1.2.9. 哈希算法-相同的请求发到相同的服务器
  18.1.2.10. IP 地址散列（保证客户端服务器对应关系稳定）相同客户端服务器相同
  18.1.2.11.URL 散列-相同url服务器相同
 18.1.3.1. LVS 原理
  LVS 的 IP 负载均衡技术是通过 IPVS 模块来实现的，IPVS 是 LVS 集群系统的核心软件
  安装在 Director Server 上，同时在 Director Server 上虚拟出一个 IP 地址
  用户必须通过这个虚拟的 IP 地址访问服务器。这个虚拟 IP 一般称为 LVS 的 VIP，即 Virtual IP
  访问的请求首先经过 VIP 到达负载调度器
  然后由负载调度器从 Real Server 列表中选取一个服务节点响应用户的请求
  如何发请求到真实服务器，怎么返回，是 IPVS 实现的重点技术。
  ipvs ： 工作于内核空间，主要用于使用户定义的策略生效
  ipvsadm : 工作于用户空间，主要用于用户定义和管理集群服务的工具
 18.1.3.1. LVS NAT 模式
  
  
  