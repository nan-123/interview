对接流程
1：获取外部平台的文档
2：写一个工具类，封装公用参数及调用外部平台接口
 拉单：-需要建好店铺数据
 读数据表获取店铺配置-校验参数，店铺唯一id
 调用拉单方法：入参：状态，开始时间，结束时间，分页每页多少条
 获取到接口返回数据json转换成外部订单对象list
 循环list保存成内部订单对象保存到数据库
 需要注意：金额计算，优惠计算，单位换算，状态处理，明细的条码，oid数据获取，金额计算，异常处理
 然后走赠品或者优惠保存
 商品：
 也是接口调用，大体跟订单相同，注意店铺关联，条码，商品编码，状态
 库存同步：
 注意入参，全量还是增量，条码判断，实时失败告警
 发货：
 注意是整单发货还是拆单发货，参数传的类型不一样
 售后单：
 跟订单一样保存，重点注意数据状态，申请中-同意-退款成功-失败分别调用不同的下游接口通知下游系统
跟下游系统
 推单：注意数据封装，有的平台需要传额外的数据：导购信息，锁粉，重点是推送成功或者失败的通知
 
 京东，淘宝是通过云鼎，聚石塔获取数据的，平台那边把数据推送到云鼎，聚石塔，我们这边调用聚石塔获取数据，也是分页获取的，每分钟可以调用300次
 
系统优化方面：
 发货流程优化：下游系统把发货消息回传给到我们，并没有消息确认机制，会出现消息保存错误或者丢失，导致订单未发货，新增消息确认机制：在接受到消息并且保存成功后，我们这边发送一条消息告诉下游系统消息已经成保存，下游系统重发也没关系
   我们这边会判重，如果已经存在，直接发送确认消息
 优化系统订单推送问题
   之前平台都是先保存订单，再由调度系统触发推送到下游，这样增加了订单流入的时效，改造：
   订单保存后立刻推送，把订单标记成推送中，避免调度系统再次重复推送
 发货流程优化
   之前是接收到了下游系统的发货数据后，等调度系统触发，发货时效低，改造：立刻推送，把发货数据标记成推送中，避免调度系统再次重复推送
 redis改造哨兵模式
  原来的redis是单点模式，避免单点故障，涉及：配置文件，项目application.xml jidispool的配置，换成JedisSentinelPool,布隆过滤器初始化改用哨兵模式初始化(难点)
项目遇到的问题：
  数据库事务没提交就发送消息
  去重不保存数据没结束流程
  MD5使用biginter导致加密字符串不一定正确
  接口调用使用json替代list，导致接口解析出错
 
系统架构：
 
 ----------------------------网关---------------------------------------
   outside                                       order
 tomcat1 - tomcat2   ----dubbo/rabbitmq----  tomcat1 - tomcat2  
   redis                                        redis
    db                                            db



	
outside架构
    对外
	 |
 outside-api
    dubbo
     |
 outside ----jms--rabbitmq----与其他系统交互
     |
 mybatis+spring+springmvc+scheduler
   储存：redis+orcle
  
 jobapp：
作用：调度，监控，店铺，订单数据维护

quartz---的Scheduler
 三个概念：调度器，任务，触发器
   调度器：调度器对象，用来执行 任务+tiiger
   任务：类对象，实现job接口重写execute方法
   tiiger：调度配置。时间配置等
   
   StdSchedulerFactory的作用
　　使用一组参数（Java.util.Properties）来创建和初始化Quartz调度器
　　配置参数一般存储在quartz.properties中
　　调用getScheduler方法就能创建和初始化调度器对象
  Scheduler的主要函数
    复制代码
    // 绑定 jobDetail 和 trigger，将它注册进 Scheduler 当中  ,返回值是最近一次任务执行的开始时间
    Date scheduleJob(JobDetail jobDetail, Trigger trigger)
    // 启动 Scheduler
    void start()
    // 暂停 Scheduler
    void standby()
    // 关闭 Scheduler
    void shutdown()
 jobapp：
   springboot+saturn
          |
   redis+bloomfilter
         db   
 saturn ：
  唯品的调度框架，在当当开源的elastic job基础上做开发，特点：做到全域统一配置，统一监控，任务高可用及分片处理
    垮平台，支持秒级调度，分片执行，只能负载均衡，异常检测，失败自动转移，配置灵活-优先级，可指定ip，实时监控，经受住唯品800+节点，10亿级别的调度考验
   依赖zk做节点监控，需要安装控制台作为配置入口
   开发-
  
  