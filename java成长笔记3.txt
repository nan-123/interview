8. Netty 与 RPC
  Netty 是一个高性能、异步事件驱动的 NIO 框架，基于 JAVA NIO 提供的 API 实现
  它提供了对TCP、UDP 和文件传输的支持，作为一个异步 NIO 框架，Netty 的所有 IO 操作都是异步非阻塞
  的，通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果。
  
 8.1.2. Netty 高性能
  1 多线程或者 IO 多路复用技术
    1.1 IO 多路复用技术通过把多个 IO 的阻塞复用到同一个 select 的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求I/O 多路复用的
    1.2 最大优势是系统开销小，系统不需要创建新的额外进程或者线程，也不需要维护这些进程和线程的运行
	1.3  跟Socket 类和 ServerSocket 类相对应，NIO 也提供了 SocketChannel 和 ServerSocketChannel
          两种不同的套接字通道实现。
8.1.2.1. 多路复用通讯方式
  Netty 架构按照 Reactor 模式设计和实现
  服务端：
  1：打开ServerSocketChannel
  2：绑定监听地址
  3：创建selector，启动线程
  4：将ServerSocketChannel注册到selector，监听
  5：selector轮询就绪key
  6：handleAccept处理新的客户端接入
  7：设置新建客户端连接socket
  8：向selctor注册监听读操作
  9：handlerread 异步读请求消息到bytebuffer
  10：decode请求
  11：异步写bytebuffer到 SocketChannel
  三个重要组件 nioserver-reactor thread-lohandler
  客户端：
  1：打开SocketChannel
  2：设置SocketChannel为非阻塞，tcp参数
  3：异步连接服务器
  4：判断接收结果
  5：向Reactor线程的多路复用器注册op connect事件
  6：创建selector，启动线程
  7：selector轮询就绪的key
  8：handerconnect()
  9:判断连接，完成，执行10
  10：向多路复用器注册读事件：op_read
  11:
 Netty 的 IO 线程 NioEventLoop 由于聚合了多路复用器 Selector，
  可以同时并发处理成百上千个客户端 Channel
	
  8.1.2.1. 异步通讯 NIO
	 由于 Netty 采用了异步通信模式，一个 IO 线程可以并发处理 N 个客户端连接和读写操作
  8.1.2.2. 零拷贝（DIRECT BUFFERS 使用堆外直接内存）	  
  8.1.2.3. 内存池（基于内存池的缓冲区重用机制）	  
	 Netty 提供了基于内存池的缓冲区重用机制	  
  8.1.2.4. 高效的 Reactor 线程模型
   常用的 Reactor 线程模型有三种，Reactor 单线程模型, Reactor 多线程模型, 主从 Reactor 多线程模型
 8.1.2.5. 无锁设计、线程绑定
 8.1.2.6. 高性能的序列化框架
		 Netty 默认提供了对 Google Protobuf 的支持  
8.1.3. Netty RPC 实现
  1. 服务发布与订阅：服务端使用 Zookeeper 注册服务地址，客户端从 Zookeeper 获取可用的服务
     地址。
  2. 通信：使用 Netty 作为通信框架。
  3. Spring：使用 Spring 配置服务，加载 Bean，扫描注解。
  4. 动态代理：客户端使用代理模式透明化服务调用。
  5. 消息编解码：使用 Protostuff 序列化和反序列化消息。
 8.1.3.3. 核心流程
  1. 服务消费方（client）调用以本地调用方式调用服务；
  2. client stub 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
  3. client stub 找到服务地址，并将消息发送到服务端；
  4. server stub 收到消息后进行解码；
  5. server stub 根据解码结果调用本地的服务；
  6. 本地服务执行并将结果返回给 server stub；
  7. server stub 将返回结果打包成消息并发送至消费方；
  8. client stub 接收到消息，并进行解码；
  9. 服务消费方得到最终结果
 8.1.3.1. 消息编解码
  息数据结构（接口名称+方法名+参数类型和参数值+超时时间+ requestID）
 序列化
  目前互联网公司广泛使用 Protobuf、Thrift、Avro 等成熟的序列化解决方案来搭建 RPC 框架，这
  些都是久经考验的解决方案。
 8.1.3.1. 通讯过程
  核心问题(线程暂停、消息乱序)
  1 requestID 生成-AtomicLong 生成一个唯一的 ID
  2 存放回调对象 callback 到全局 ConcurrentHashMap
  3 synchronized 获取回调对象 callback 的锁并自旋 wait
     再先检测是否已经获取到结果，如果没有，然后调用 callback 的 wait()方法，释放
     callback 上的锁，让当前线程处于等待状态
  4 监听消息的线程收到消息，找到 callback 上的锁并唤醒
     取到requestID ，再从前面的 ConcurrentHashMap 里 面 get(requestID) ，从而找到
     callback 对象，再用 synchronized 获取 callback 上的锁，将方法调用结果设置到
     callback 对象里，再调用 callback.notifyAll()唤醒前面处于等待状态的线程。
 8.1.4. RMI 实现方式
  Java 远程方法调用，即 Java RMI（Java Remote Method Invocation）是 Java 编程语言里，一种用于实现远程过程调用的应用程序编程接口
 8.1.4.1. 实现步骤
  1. 编写远程服务接口，该接口必须继承 java.rmi.Remote 接口，方法必须抛出
     java.rmi.RemoteException 异常；
  2. 编写远程接口实现类，该实现类必须继承 java.rmi.server.UnicastRemoteObject 类；
  3. 运行 RMI 编译器（rmic），创建客户端 stub 类和服务端 skeleton 类;
  4. 启动一个 RMI 注册表，以便驻留这些服务;
  5. 在 RMI 注册表中注册服务；
  6. 客户端查找远程对象，并调用远程方法；
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
9. 网络
   网络7层结构
   1：物理层
       物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等
   2：数据链路层：
       主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装--这一层工作的设备是交换机
   3：网络层
       主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装--在这一层工作的设备是路由器
   4：传输层：
       定义了一些传输数据的协议和端口号-tcp，udp
   5：会话层
       通过传输层（端口号：传输端口与接收端口）建立数据传输的通路--也就是发起请求
   6：表示层
       主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩等--响应
   7：应用层
        终端-qq应用
9.1.2. TCP/IP 原理
 	TCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族
 	TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层。
	 网络接口层
      	 只是指出主机必须使用某种协议与网络相连
	 网络层
	    互联网层使用因特网协议(IP，Internet Protocol)。
	 传输层
	    在这一层定义了两个端到端的协议 tcp，udp
	 应用层
	    包含所有的高层协议，包括：虚拟终端协议(TELNET，TELecommunications NETwork)、文件传输协议(FTP，File Transfer Protocol)、电子邮件
        传输协议(SMTP，Simple Mail Transfer Protocol)、域名服务(DNS，Domain NameService)、网上新闻传输协议(NNTP，Net News Transfer Protocol)和超文本传送协议
        (HTTP，HyperText Transfer Protocol)等
		
9.1.3. TCP 三次握手/四次挥手
 	  第一次握手：主机 A 发送位码为 syn＝1,随机产生 seq number=1234567 的数据包到服务器，主机 B 由 SYN=1 知道，A 要求建立联机；
      第二次握手：主机 B 收到请求后要确认联机信息，向 A 发 送 ack number=( 主 机 A 的
      seq+1),syn=1,ack=1,随机产生 seq=7654321 的包
      第三次握手：主机 A 收到后检查 ack number 是否正确，即第一次发送的 seq number+1,以及位码
      ack 是否为 1，若正确，主机 A 会再发送 ack number=(主机 B 的 seq+1),ack=1，主机 B 收到后确认seq 值与 ack=1 则连接建立成功。
    四次挥手
     TCP 建立连接要进行三次握手，而断开连接要进行四次 这是由于 TCP 的半关闭造成的	
    	1） 关闭客户端到服务器的连接：首先客户端 A 发送一个 FIN，用来关闭客户到服务器的数据传送，
        然后等待服务器的确认。其中终止标志位 FIN=1，序列号 seq=u
        2） 服务器收到这个 FIN，它发回一个 ACK，确认号 ack 为收到的序号加 1。
         3） 关闭服务器到客户端的连接：也是发送一个 FIN 给客户端。
        4） 客户段收到 FIN 后，并发回一个 ACK 报文确认，并将确认序号 seq 设置为收到序号加 1。
         首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。	  
9.1.4. HTTP 原理
  	HTTP 是一个无状态的协议	 无状态是指客户机（Web 浏览器）和服务器之间不需要建立持久的连接 
	这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了	  
	服务器端不保留连接的有关信息.HTTP 遵循请求(Request)/应答(Response)模型	  
	客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。
  9.1.4.1. 传输流程
  1：地址解析
     如用客户端浏览器请求这个页面：http://localhost.com:8080/index.htm 从中分解出协议名、主机名
	 端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：
      协议名：http
      主机名：localhost.com
      端口：8080
      对象路径：/index.htm
	在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。	  
   2：封装 HTTP 请求数据包
     把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包 
   3：封装成 TCP 包并建立连接
     封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）
   4：客户机发送请求命
       请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可内容。 
   5：服务器响应
      服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或
      错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。	
   6：服务器关闭 TCP 连接
       服务器关闭 TCP 连接：一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连
	   然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive，TCP 连接在发送
       后将仍然保持打开状态
	   保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。  
9.1.4.2. HTTP 状态
        消息响应
  		100 Continue(继续)
        101 Switching Protocol(切换协议)
        13/04/2018 Page 166 of 283
        成功响应
        200 OK(成功)
        201 Created(已创建)
        202 Accepted(已创建)
        203 Non-Authoritative Information(未授权信息)
        204 No Content(无内容)
        205 Reset Content(重置内容)
        206 Partial Content(部分内容)
        重定向
        300 Multiple Choice(多种选择)
        301 Moved Permanently(永久移动)
        302 Found(临时移动)
        303 See Other(查看其他位置)
        304 Not Modified(未修改)
        305 Use Proxy(使用代理)
        306 unused(未使用)
        307 Temporary Redirect(临时重定向)
        308 Permanent Redirect(永久重定向)
        客户端错误
        400 Bad Request(错误请求)
        401 Unauthorized(未授权)
        402 Payment Required(需要付款)
        403 Forbidden(禁止访问)
        404 Not Found(未找到)
        405 Method Not Allowed(不允许使用该方法)
        406 Not Acceptable(无法接受)
        407 Proxy Authentication Required(要求代理身份验证)
        408 Request Timeout(请求超时)
        409 Conflict(冲突)
        410 Gone(已失效)
        411 Length Required(需要内容长度头)
        412 Precondition Failed(预处理失败)
        413 Request Entity Too Large(请求实体过长)
        414 Request-URI Too Long(请求网址过长)
        415 Unsupported Media Type(媒体类型不支持)
        416 Requested Range Not Satisfiable(请求范围不合要求)
        417 Expectation Failed(预期结果失败)
        服务器端错误
        500 Internal Server Error(内部服务器错误)
        501 Implemented(未实现)
        502 Bad Gateway(网关错误)
        503 Service Unavailable(服务不可用)
        504 Gateway Timeout (网关超时)
        505 HTTP Version Not Supported(HTTP 版本不受支持)  
9.1.4.3. HTTPS
 	HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的
    HTTP 通道，简单讲是 HTTP 的安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL。其所用
    的端口号是 443。 过程大致如下
  建立连接获取证书	
  证书验证	  
  数据加密和传输
9.1.5. CDN 原理
  CND 一般包含分发服务系统、负载均衡系统和管理系统
----------------------------------------------------------------------------------------------------------
 10. 日志
  10.1.1. Slf4j
  它仅仅是一个为 Java 程序提供日志输出的统一接口，并不是一个具体的日志实现方案，就比如 JDBC 一样，只是一种规则而已
   所以单独的 slf4j 是不能工作的，必须搭配其他具体的日志实现方案，比如 apache 的 org.apache.log4j.Logger，jdk 自带
   的 java.util.logging.Logger 等。	  
  10.1.2. Log4j
     Log4j 是 Apache 的一个开源项目
	 Log4j 由三个重要的组成构成：日志记录器(Loggers)，输出端(Appenders)和日志格式化器(Layout)。
	1.Logger：控制要启用或禁用哪些日志记录语句，并对日志信息进行级别限制
    2.Appenders : 指定了日志将打印到控制台还是文件中
    3.Layout : 控制日志信息的显示格式	  
  10.1.3. LogBack	
   简单地说，Logback 是一个 Java 领域的日志框架。它被认为是 Log4J 的继承人。 
  10.1.4. ELK
     ELK 是软件集合 Elasticsearch、Logstash、Kibana 的简称
	 由这三个软件及其相关的组件可以打造大规模日志实时处理系统。
	Elasticsearch 是一个基于 Lucene 的、支持全文索引的分布式存储和索引引擎，主要负责将日志索引并存储起来，方便业务方检索查询
	Logstash 是一个日志收集、过滤、转发的中间件，主要负责将各条业务线的各类日志统一收
     集、过滤后，转发给 Elasticsearch 进行下一步处理	  
	Kibana 是一个可视化工具	  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  